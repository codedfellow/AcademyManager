@model AcademyManager.ViewModels.ScoresVM
@inject AcademyManager.Contracts.ITestsAndExamsRepository testsRepo
@inject UserManager<AMUser> userManager
@{ 
    var testOrExam = testsRepo.FindById(Model.TestOrExamId);
    var trainee = userManager.FindByIdAsync(Model.TraineeId).Result;
}
<div class="container-fluid">
    <div class="col-md-6" style="margin: 5px auto;">
        <div class="card card-primary">
            <div class="card-header">
                <p><h1 class="card-title">Add Score for @trainee.FirstName @trainee.LastName @trainee.MiddleName</h1></p><br />
                <hr />
                <p><h4>Total: @testOrExam.Total</h4></p>
            </div>
            <div class="card-body">
                <div>
                    <form asp-action="AddScore">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="form-group">
                            <input asp-for="TraineeId" type="hidden" />
                        </div>
                        <div class="form-group">
                            <input type="hidden" asp-for="TestOrExamId" />
                        </div>
                        <div class="form-group">
                            <label asp-for="Score" class="control-label"></label>
                            <input asp-for="Score" class="form-control" />
                            <span asp-validation-for="Score" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <input type="submit" value="Add Score" class="btn btn-primary" />
                        </div>
                    </form>
                </div>
            </div>
            <div class="card-footer">
                <a class="btn bg-gradient-indigo" asp-action="ListTraineesForTest" asp-route-testOrExamId="@Model.TestOrExamId">Back to List</a>
            </div>
        </div>
    </div>

    


</div>
